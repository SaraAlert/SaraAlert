{
  "description": "SaraAlertDemoFlow",
  "states": [
    {
      "name": "Trigger",
      "type": "trigger",
      "transitions": [
        {
          "next": "OptOutTypeNotBlank",
          "event": "incomingMessage"
        },
        {
          "next": "say_incoming_call",
          "event": "incomingCall"
        },
        {
          "next": "initialize_retry_count",
          "event": "incomingRequest"
        }
      ],
      "properties": {
        "offset": {
          "x": 1170,
          "y": -1130
        }
      }
    },
    {
      "name": "sms_assessment_prompt",
      "type": "send-and-wait-for-reply",
      "transitions": [
        {
          "next": "OptOutTypeNotBlankReply",
          "event": "incomingMessage"
        },
        {
          "next": "send_assessment_sms_no_response",
          "event": "timeout"
        },
        {
          "next": "send_assessment_sms_error",
          "event": "deliveryFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": -890,
          "y": -250
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "{{flow.channel.address}}",
        "body": "{{flow.data.prompt}}",
        "timeout": "64800"
      }
    },
    {
      "name": "send_assessment_data_no",
      "type": "make-http-request",
      "transitions": [
        {
          "next": "send_message_1",
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -150,
          "y": 1780
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"success_sms\", \n\"experiencing_symptoms\":\"No\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "check_yes_no",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "increment_retry_count",
          "event": "noMatch"
        },
        {
          "next": "send_assessment_data_yes",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of yes",
              "arguments": [
                "{{widgets.sms_assessment_prompt.inbound.Body}}"
              ],
              "type": "matches_any_of",
              "value": "yes,Yes,YES,Yes.,“Yes”,yes”,“Yes.“,yeah,YEAH,Yeah,“yeah”,“Yeah”,si,Si,sí,SI,SÍ,oui,OUI,Oui, oui.,OUI.,Oui.,Haa, HAA,Haa.,HAA."
            }
          ]
        },
        {
          "next": "send_assessment_data_no",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of no",
              "arguments": [
                "{{widgets.sms_assessment_prompt.inbound.Body}}"
              ],
              "type": "matches_any_of",
              "value": "no,No,NO.,No.,“No”,“no”,“No.“,nope,NOPE,“nope”,“Nope”,Nope,“Nope”,Non,non,NON,Non. NON.,non.,Maya,MAYA,maya,Maya.,maya.,MAYA."
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.sms_assessment_prompt.inbound.Body}}",
        "offset": {
          "x": -770,
          "y": 510
        }
      }
    },
    {
      "name": "bad_response",
      "type": "send-and-wait-for-reply",
      "transitions": [
        {
          "next": "OptOutTypeNotBlankRetry",
          "event": "incomingMessage"
        },
        {
          "next": "send_assessment_sms_no_response",
          "event": "timeout"
        },
        {
          "next": "bad_response_sms_error",
          "event": "deliveryFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": -1210,
          "y": 1020
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "{{flow.channel.address}}",
        "body": "{{flow.data.try_again}}",
        "timeout": "3600"
      }
    },
    {
      "name": "send_message_1",
      "type": "send-message",
      "transitions": [
        {
          "event": "sent"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -300,
          "y": 2100
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "{{flow.channel.address}}",
        "to": "{{contact.channel.address}}",
        "body": "{{flow.data.thanks}}"
      }
    },
    {
      "name": "check_yes_no_again",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "increment_retry_count",
          "event": "noMatch"
        },
        {
          "next": "send_assessment_data_yes",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of yes",
              "arguments": [
                "{{widgets.bad_response.inbound.Body}}"
              ],
              "type": "matches_any_of",
              "value": "yes,Yes,YES,Yes.,“Yes”,yes”,“Yes.“,yeah,YEAH,Yeah,“yeah”,“Yeah”,si,Si,sí,SI,SÍ,oui,OUI,Oui, oui.,OUI.,Oui.,Haa, HAA,Haa.,HAA."
            }
          ]
        },
        {
          "next": "send_assessment_data_no",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of no",
              "arguments": [
                "{{widgets.bad_response.inbound.Body}}"
              ],
              "type": "matches_any_of",
              "value": "no,No,NO.,No.,“No”,“no”,“No.“,nope,NOPE,“nope”,“Nope”,Nope,“Nope”,Non,non,NON,Non. NON.,non.,Maya,MAYA,maya,Maya.,maya.,MAYA."
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.bad_response.inbound.Body}}",
        "offset": {
          "x": -510,
          "y": 1450
        }
      }
    },
    {
      "name": "send_assessment_data_yes",
      "type": "make-http-request",
      "transitions": [
        {
          "next": "send_message_1",
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -460,
          "y": 1780
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"success_sms\", \n\"experiencing_symptoms\":\"Yes\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "call_user",
      "type": "make-outgoing-call-v2",
      "transitions": [
        {
          "next": "split_on_answered_by",
          "event": "answered"
        },
        {
          "next": "voice_send_no_answer",
          "event": "busy"
        },
        {
          "next": "voice_send_no_answer",
          "event": "noAnswer"
        },
        {
          "next": "voice_send_error",
          "event": "failed"
        }
      ],
      "properties": {
        "machine_detection_speech_threshold": "2400",
        "detect_answering_machine": true,
        "offset": {
          "x": 1490,
          "y": 320
        },
        "recording_channels": "mono",
        "timeout": 60,
        "machine_detection": "Enable",
        "trim": "do-not-trim",
        "record": false,
        "machine_detection_speech_end_threshold": "1200",
        "machine_detection_timeout": "30",
        "from": "{{flow.channel.address}}",
        "to": "{{contact.channel.address}}",
        "machine_detection_silence_timeout": "10000"
      }
    },
    {
      "name": "welcome_prompt",
      "type": "say-play",
      "transitions": [
        {
          "next": "voice_reply_to_prompt",
          "event": "audioComplete"
        }
      ],
      "properties": {
        "voice": "{{flow.variables.voice}}",
        "offset": {
          "x": 1490,
          "y": 870
        },
        "loop": 1,
        "say": "{{flow.data.intro}}",
        "language": "{{flow.variables.language}}"
      }
    },
    {
      "name": "voice_reply_to_prompt",
      "type": "gather-input-on-call",
      "transitions": [
        {
          "event": "keypress"
        },
        {
          "next": "check_yes_no_voice",
          "event": "speech"
        },
        {
          "next": "increment_retry_count_voice",
          "event": "timeout"
        }
      ],
      "properties": {
        "voice": "{{flow.variables.voice}}",
        "offset": {
          "x": 1490,
          "y": 1200
        },
        "hints": "yes, no, si, oui, non",
        "finish_on_key": "#",
        "say": "{{flow.data.prompt}}",
        "language": "{{flow.variables.language}}",
        "stop_gather": true,
        "speech_model": "numbers_and_commands",
        "profanity_filter": "true",
        "timeout": 5,
        "speech_timeout": "auto",
        "loop": 1,
        "gather_language": "{{flow.variables.language}}"
      }
    },
    {
      "name": "check_yes_no_voice",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "increment_retry_count_voice",
          "event": "noMatch"
        },
        {
          "next": "voice_send_assessment_no",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of no",
              "arguments": [
                "{{widgets.voice_reply_to_prompt.SpeechResult}}"
              ],
              "type": "matches_any_of",
              "value": "no,No.,NO,nope,Nope.,nope.,Non, non, NON, Non. NON., non."
            }
          ]
        },
        {
          "next": "voice_send_assessment_yes",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches_any_of yes",
              "arguments": [
                "{{widgets.voice_reply_to_prompt.SpeechResult}}"
              ],
              "type": "matches_any_of",
              "value": "yes,Yes,Yes.,Yeah,yeah,Yeah.,si, Si,oui, OUI, Oui, oui.,OUI.,Oui."
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.voice_reply_to_prompt.SpeechResult}}",
        "offset": {
          "x": 1670,
          "y": 1630
        }
      }
    },
    {
      "name": "say_lets_try_again",
      "type": "say-play",
      "transitions": [
        {
          "next": "voice_reply_to_prompt",
          "event": "audioComplete"
        }
      ],
      "properties": {
        "voice": "{{flow.variables.voice}}",
        "offset": {
          "x": 2070,
          "y": 1380
        },
        "loop": 1,
        "say": "{{flow.data.try_again}}",
        "language": "{{flow.variables.language}}"
      }
    },
    {
      "name": "voice_send_no_answer",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 2070,
          "y": 830
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"no_answer_voice\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "split_on_answered_by",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "voice_send_no_answer",
          "event": "noMatch"
        },
        {
          "next": "welcome_prompt",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to human",
              "arguments": [
                "{{widgets.call_user.AnsweredBy}}"
              ],
              "type": "matches_any_of",
              "value": "human, unknown"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.call_user.AnsweredBy}}",
        "offset": {
          "x": 1310,
          "y": 600
        }
      }
    },
    {
      "name": "send_assessment_sms_no_response",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -2080,
          "y": 1730
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"no_answer_sms\", \n\"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "send_assessment_sms_error",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -420,
          "y": 370
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"error_sms\", \"error_code\": \"{{widgets.sms_assessment_prompt.outbound.ErrorCode}}\" , \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\", \"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "voice_send_error",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 2150,
          "y": 570
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"error_voice\",\"error_code\":\"{{widgets.call_user.ErrorCode}}\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "say_incoming_call",
      "type": "say-play",
      "transitions": [
        {
          "event": "audioComplete"
        }
      ],
      "properties": {
        "offset": {
          "x": 1230,
          "y": -780
        },
        "loop": 1,
        "say": "Hello, you have reached Sara Alert outside of your daily report requirement, please contact your public health department directly if you are experiencing symptoms."
      }
    },
    {
      "name": "voice_send_assessment_yes",
      "type": "make-http-request",
      "transitions": [
        {
          "next": "thank_you_voice",
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 1730,
          "y": 2000
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"success_voice\", \n\"experiencing_symptoms\":\"Yes\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "thank_you_voice",
      "type": "say-play",
      "transitions": [
        {
          "event": "audioComplete"
        }
      ],
      "properties": {
        "voice": "{{flow.variables.voice}}",
        "offset": {
          "x": 1980,
          "y": 2320
        },
        "loop": 1,
        "say": "{{flow.data.thanks}}",
        "language": "{{flow.variables.language}}"
      }
    },
    {
      "name": "voice_send_assessment_no",
      "type": "make-http-request",
      "transitions": [
        {
          "next": "thank_you_voice",
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 2200,
          "y": 1990
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"success_voice\", \n\"experiencing_symptoms\":\"No\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "OptOutTypeNotBlank",
      "type": "split-based-on",
      "transitions": [
        {
          "event": "noMatch"
        },
        {
          "next": "PostOptOutInfoSTART",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "{{trigger.message.OptOutType}}",
              "arguments": [
                "{{trigger.message.OptOutType}}"
              ],
              "type": "equal_to",
              "value": "START"
            }
          ]
        },
        {
          "next": "PostOptOutInfoSTOP",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to STOP",
              "arguments": [
                "{{trigger.message.OptOutType}}"
              ],
              "type": "equal_to",
              "value": "STOP"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{trigger.message.OptOutType}}",
        "offset": {
          "x": 10,
          "y": -740
        }
      }
    },
    {
      "name": "sms_or_voice",
      "type": "split-based-on",
      "transitions": [
        {
          "event": "noMatch"
        },
        {
          "next": "sms_assessment_prompt",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to SMS",
              "arguments": [
                "{{flow.data.medium}}"
              ],
              "type": "equal_to",
              "value": "SMS"
            }
          ]
        },
        {
          "next": "set_language_voice_options",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to VOICE",
              "arguments": [
                "{{flow.data.medium}}"
              ],
              "type": "equal_to",
              "value": "VOICE"
            }
          ]
        },
        {
          "next": "split_on_iterator",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to SINGLE_SMS",
              "arguments": [
                "{{flow.data.medium}}"
              ],
              "type": "equal_to",
              "value": "SINGLE_SMS"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{flow.data.medium}}",
        "offset": {
          "x": 900,
          "y": -470
        }
      }
    },
    {
      "name": "PostOptOutInfoSTOP",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 490,
          "y": 2580
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"patient_submission_token\": \"{{flow.sid}}\", \"response_status\": \"opt_out\" }",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "OptOutTypeNotBlankReply",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "check_yes_no",
          "event": "noMatch"
        },
        {
          "next": "PostOptOutInfoSTOP",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "{{trigger.message.OptOutType}}",
              "arguments": [
                "{{widgets.sms_assessment_prompt.inbound.OptOutType}}"
              ],
              "type": "equal_to",
              "value": "STOP"
            }
          ]
        },
        {
          "next": "PostOptOutInfoSTART",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to START",
              "arguments": [
                "{{widgets.sms_assessment_prompt.inbound.OptOutType}}"
              ],
              "type": "equal_to",
              "value": "START"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.sms_assessment_prompt.inbound.OptOutType}}",
        "offset": {
          "x": -1360,
          "y": 140
        }
      }
    },
    {
      "name": "OptOutTypeNotBlankRetry",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "check_yes_no_again",
          "event": "noMatch"
        },
        {
          "next": "PostOptOutInfoSTART",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "{{trigger.message.OptOutType}}",
              "arguments": [
                "{{widgets.bad_response.inbound.OptOutType}}"
              ],
              "type": "equal_to",
              "value": "START"
            }
          ]
        },
        {
          "next": "PostOptOutInfoSTOP",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value equal_to STOP",
              "arguments": [
                "{{widgets.bad_response.inbound.OptOutType}}"
              ],
              "type": "equal_to",
              "value": "STOP"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.bad_response.inbound.OptOutType}}",
        "offset": {
          "x": -1290,
          "y": 1440
        }
      }
    },
    {
      "name": "PostOptOutInfoSTART",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 50,
          "y": 2580
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"patient_submission_token\": \"{{flow.sid}}\", \"response_status\": \"opt_in\" }",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "initialize_retry_count",
      "type": "set-variables",
      "transitions": [
        {
          "next": "sms_or_voice",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "0",
            "key": "retry_count"
          },
          {
            "value": "0",
            "key": "iterator"
          }
        ],
        "offset": {
          "x": 1630,
          "y": -780
        }
      }
    },
    {
      "name": "increment_retry_count",
      "type": "set-variables",
      "transitions": [
        {
          "next": "split_on_retry_sms",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{%- if flow.variables.retry_count -%}\n  {{flow.variables.retry_count | plus: 1}}\n{%- else -%}\n  0\n{%- endif -%}",
            "key": "retry_count"
          }
        ],
        "offset": {
          "x": -1590,
          "y": 590
        }
      }
    },
    {
      "name": "split_on_retry_sms",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "max_retries_exceeded_sms",
          "event": "noMatch"
        },
        {
          "next": "bad_response",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value less than 4",
              "arguments": [
                "{{flow.variables.retry_count}}"
              ],
              "type": "less_than",
              "value": "4"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{flow.variables.retry_count}}",
        "offset": {
          "x": -1590,
          "y": 810
        }
      }
    },
    {
      "name": "max_retries_exceeded_sms",
      "type": "send-message",
      "transitions": [
        {
          "next": "send_assessment_sms_max_retries",
          "event": "sent"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -1600,
          "y": 1020
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "{{flow.channel.address}}",
        "to": "{{contact.channel.address}}",
        "body": "{{flow.data.max_retries_message}}"
      }
    },
    {
      "name": "split_on_retry_voice",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "max_retries_exceeded",
          "event": "noMatch"
        },
        {
          "next": "say_lets_try_again",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value less than 4",
              "arguments": [
                "{{flow.variables.retry_count}}"
              ],
              "type": "less_than",
              "value": "4"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{flow.variables.retry_count}}",
        "offset": {
          "x": 1060,
          "y": 1470
        }
      }
    },
    {
      "name": "increment_retry_count_voice",
      "type": "set-variables",
      "transitions": [
        {
          "next": "split_on_retry_voice",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{%- if flow.variables.retry_count -%}\n  {{flow.variables.retry_count | plus: 1}}\n{%- else -%}\n  0\n{%- endif -%}",
            "key": "retry_count"
          }
        ],
        "offset": {
          "x": 1050,
          "y": 1270
        }
      }
    },
    {
      "name": "max_retries_exceeded",
      "type": "say-play",
      "transitions": [
        {
          "next": "voice_send_max_retry",
          "event": "audioComplete"
        }
      ],
      "properties": {
        "voice": "{{flow.variables.voice}}",
        "offset": {
          "x": 1110,
          "y": 1760
        },
        "loop": 1,
        "say": "{{flow.data.max_retries_message}}",
        "language": "{{flow.variables.language}}"
      }
    },
    {
      "name": "voice_send_max_retry",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 1140,
          "y": 2030
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"max_retries_voice\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "send_assessment_sms_max_retries",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -1600,
          "y": 1240
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"max_retries_sms\", \n\"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "bad_response_sms_error",
      "type": "make-http-request",
      "transitions": [
        {
          "event": "success"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": -1680,
          "y": 1710
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"error_sms\", \"error_code\": {{widgets.bad_response.outbound.ErrorCode}}, \n\"patient_submission_token\": \"{{flow.data.patient_submission_token}}\",\n\"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "set_language_voice_options",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "set_language_EN",
          "event": "noMatch"
        },
        {
          "next": "set_language_EN",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches any of EN, ENG",
              "arguments": [
                "{{flow.data.language}}"
              ],
              "type": "matches_any_of",
              "value": "EN,ENG"
            }
          ]
        },
        {
          "next": "set_language_ES",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches any of ES, SPA, SPA-PR",
              "arguments": [
                "{{flow.data.language}}"
              ],
              "type": "matches_any_of",
              "value": "ES,SPA,SPA-PR"
            }
          ]
        },
        {
          "next": "set_language_FR",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value matches any of FR FRA",
              "arguments": [
                "{{flow.data.language}}"
              ],
              "type": "matches_any_of",
              "value": "FR,FRA"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{flow.data.language}}",
        "offset": {
          "x": 1190,
          "y": -210
        }
      }
    },
    {
      "name": "set_language_EN",
      "type": "set-variables",
      "transitions": [
        {
          "next": "call_user",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "en-US",
            "key": "language"
          },
          {
            "value": "Polly.Joanna",
            "key": "voice"
          }
        ],
        "offset": {
          "x": 1140,
          "y": 80
        }
      }
    },
    {
      "name": "set_language_ES",
      "type": "set-variables",
      "transitions": [
        {
          "next": "call_user",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "es-ES",
            "key": "language"
          },
          {
            "value": "Polly.Conchita",
            "key": "voice"
          }
        ],
        "offset": {
          "x": 1440,
          "y": 80
        }
      }
    },
    {
      "name": "set_language_FR",
      "type": "set-variables",
      "transitions": [
        {
          "next": "call_user",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "fr-CA",
            "key": "language"
          },
          {
            "value": "Polly.Chantal",
            "key": "voice"
          }
        ],
        "offset": {
          "x": 1740,
          "y": 80
        }
      }
    },
    {
      "name": "send_single_message_error",
      "type": "make-http-request",
      "transitions": [
        {
          "next": "increment_params_iterator",
          "event": "success"
        },
        {
          "next": "increment_params_iterator",
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 3050,
          "y": 120
        },
        "method": "POST",
        "content_type": "application/json;charset=utf-8",
        "body": "{\"response_status\": \"error_sms\", \"error_code\": \"{{widgets.send_single_message.outbound.ErrorCode}}\", \"patient_submission_token\": \"{{flow.data.patient_submission_token}}\", \"threshold_hash\": \"{{flow.data.threshold_hash}}\"}",
        "url": "FILL_WITH_CUSTOM_CALLBACK_URL"
      }
    },
    {
      "name": "send_single_message",
      "type": "send-and-wait-for-reply",
      "transitions": [
        {
          "next": "no_op_widget",
          "event": "incomingMessage"
        },
        {
          "next": "no_op_widget",
          "event": "timeout"
        },
        {
          "next": "send_single_message_error",
          "event": "deliveryFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": 2710,
          "y": -230
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "{{flow.channel.address}}",
        "body": "{% assign i=flow.variables.iterator | plus:0 %}\n{{flow.data.messages_array[i].prompt}}",
        "timeout": "0"
      }
    },
    {
      "name": "no_op_widget",
      "type": "set-variables",
      "transitions": [
        {
          "next": "increment_params_iterator",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [],
        "offset": {
          "x": 2550,
          "y": 120
        }
      }
    },
    {
      "name": "split_on_iterator",
      "type": "split-based-on",
      "transitions": [
        {
          "event": "noMatch"
        },
        {
          "next": "send_single_message",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "If value less_than {{flow.data.messages_array.size}}",
              "arguments": [
                "{{flow.variables.iterator}}"
              ],
              "type": "less_than",
              "value": "{{flow.data.messages_array.size}}"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{flow.variables.iterator}}",
        "offset": {
          "x": 2710,
          "y": -520
        }
      }
    },
    {
      "name": "increment_params_iterator",
      "type": "set-variables",
      "transitions": [
        {
          "next": "split_on_iterator",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{{flow.variables.iterator | plus: 1}}",
            "key": "iterator"
          }
        ],
        "offset": {
          "x": 2798,
          "y": 415
        }
      }
    }
  ],
  "initial_state": "Trigger",
  "flags": {
    "allow_concurrent_calls": true
  }
}